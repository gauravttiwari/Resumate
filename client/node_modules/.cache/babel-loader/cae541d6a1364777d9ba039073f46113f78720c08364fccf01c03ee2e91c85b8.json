{"ast":null,"code":"// Simple error reporting/telemetry service\n// In a production environment, this would send data to an analytics service like Sentry, LogRocket, etc.\n\n// Anonymize data before sending\nconst anonymizeData = data => {\n  if (!data) return null;\n\n  // Create a deep copy to avoid modifying the original\n  const anonymized = JSON.parse(JSON.stringify(data));\n\n  // Remove potentially sensitive fields from user data\n  const sensitiveFields = ['name', 'email', 'phone', 'address', 'profilePic'];\n  sensitiveFields.forEach(field => {\n    if (anonymized[field]) {\n      if (typeof anonymized[field] === 'string') {\n        anonymized[field] = anonymized[field].length > 0 ? '[REDACTED]' : '';\n      } else {\n        delete anonymized[field];\n      }\n    }\n  });\n  return anonymized;\n};\n\n// Report error to monitoring service\nexport const reportError = (error, context = {}, level = 'error') => {\n  // Don't send reports in development mode\n  if (process.env.NODE_ENV === 'development') {\n    console.debug('Error report (dev mode only):', {\n      error,\n      context,\n      level\n    });\n    return;\n  }\n\n  // Anonymize any user data in context\n  const safeContext = anonymizeData(context);\n\n  // In production, this would send to a service like Sentry or LogRocket\n  // For now, just log to console in a structured way\n  console[level]('Error Report:', {\n    timestamp: new Date().toISOString(),\n    error: error instanceof Error ? {\n      message: error.message,\n      name: error.name,\n      stack: error.stack\n    } : error,\n    context: safeContext,\n    level,\n    appVersion: '1.0.0',\n    // Should match your app version\n    userAgent: navigator.userAgent\n  });\n\n  // To implement actual reporting to a service:\n  // fetch('https://your-error-reporting-service.com/api/log', {\n  //   method: 'POST',\n  //   headers: { 'Content-Type': 'application/json' },\n  //   body: JSON.stringify({\n  //     error, context: safeContext, level, timestamp: new Date().toISOString()\n  //   })\n  // }).catch(e => console.error('Failed to send error report:', e));\n};\n\n// Report feature usage for analytics\nexport const reportUsage = (feature, metadata = {}) => {\n  // For future implementation of usage analytics\n  if (process.env.NODE_ENV === 'development') {\n    console.debug('Usage report (dev mode only):', {\n      feature,\n      metadata\n    });\n  }\n};\nexport default {\n  reportError,\n  reportUsage\n};","map":{"version":3,"names":["anonymizeData","data","anonymized","JSON","parse","stringify","sensitiveFields","forEach","field","length","reportError","error","context","level","process","env","NODE_ENV","console","debug","safeContext","timestamp","Date","toISOString","Error","message","name","stack","appVersion","userAgent","navigator","reportUsage","feature","metadata"],"sources":["C:/Users/dell/OneDrive/Desktop/resumate/client/src/errorReporting.js"],"sourcesContent":["// Simple error reporting/telemetry service\r\n// In a production environment, this would send data to an analytics service like Sentry, LogRocket, etc.\r\n\r\n// Anonymize data before sending\r\nconst anonymizeData = (data) => {\r\n  if (!data) return null;\r\n  \r\n  // Create a deep copy to avoid modifying the original\r\n  const anonymized = JSON.parse(JSON.stringify(data));\r\n  \r\n  // Remove potentially sensitive fields from user data\r\n  const sensitiveFields = ['name', 'email', 'phone', 'address', 'profilePic'];\r\n  \r\n  sensitiveFields.forEach(field => {\r\n    if (anonymized[field]) {\r\n      if (typeof anonymized[field] === 'string') {\r\n        anonymized[field] = anonymized[field].length > 0 ? '[REDACTED]' : '';\r\n      } else {\r\n        delete anonymized[field];\r\n      }\r\n    }\r\n  });\r\n  \r\n  return anonymized;\r\n};\r\n\r\n// Report error to monitoring service\r\nexport const reportError = (error, context = {}, level = 'error') => {\r\n  // Don't send reports in development mode\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.debug('Error report (dev mode only):', { error, context, level });\r\n    return;\r\n  }\r\n  \r\n  // Anonymize any user data in context\r\n  const safeContext = anonymizeData(context);\r\n  \r\n  // In production, this would send to a service like Sentry or LogRocket\r\n  // For now, just log to console in a structured way\r\n  console[level]('Error Report:', {\r\n    timestamp: new Date().toISOString(),\r\n    error: error instanceof Error ? {\r\n      message: error.message,\r\n      name: error.name,\r\n      stack: error.stack\r\n    } : error,\r\n    context: safeContext,\r\n    level,\r\n    appVersion: '1.0.0', // Should match your app version\r\n    userAgent: navigator.userAgent,\r\n  });\r\n  \r\n  // To implement actual reporting to a service:\r\n  // fetch('https://your-error-reporting-service.com/api/log', {\r\n  //   method: 'POST',\r\n  //   headers: { 'Content-Type': 'application/json' },\r\n  //   body: JSON.stringify({\r\n  //     error, context: safeContext, level, timestamp: new Date().toISOString()\r\n  //   })\r\n  // }).catch(e => console.error('Failed to send error report:', e));\r\n};\r\n\r\n// Report feature usage for analytics\r\nexport const reportUsage = (feature, metadata = {}) => {\r\n  // For future implementation of usage analytics\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.debug('Usage report (dev mode only):', { feature, metadata });\r\n  }\r\n};\r\n\r\nexport default {\r\n  reportError,\r\n  reportUsage\r\n};\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA,MAAMA,aAAa,GAAIC,IAAI,IAAK;EAC9B,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;;EAEtB;EACA,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,IAAI,CAAC,CAAC;;EAEnD;EACA,MAAMK,eAAe,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,CAAC;EAE3EA,eAAe,CAACC,OAAO,CAACC,KAAK,IAAI;IAC/B,IAAIN,UAAU,CAACM,KAAK,CAAC,EAAE;MACrB,IAAI,OAAON,UAAU,CAACM,KAAK,CAAC,KAAK,QAAQ,EAAE;QACzCN,UAAU,CAACM,KAAK,CAAC,GAAGN,UAAU,CAACM,KAAK,CAAC,CAACC,MAAM,GAAG,CAAC,GAAG,YAAY,GAAG,EAAE;MACtE,CAAC,MAAM;QACL,OAAOP,UAAU,CAACM,KAAK,CAAC;MAC1B;IACF;EACF,CAAC,CAAC;EAEF,OAAON,UAAU;AACnB,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAGA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAEC,KAAK,GAAG,OAAO,KAAK;EACnE;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1CC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAE;MAAEP,KAAK;MAAEC,OAAO;MAAEC;IAAM,CAAC,CAAC;IACzE;EACF;;EAEA;EACA,MAAMM,WAAW,GAAGnB,aAAa,CAACY,OAAO,CAAC;;EAE1C;EACA;EACAK,OAAO,CAACJ,KAAK,CAAC,CAAC,eAAe,EAAE;IAC9BO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCX,KAAK,EAAEA,KAAK,YAAYY,KAAK,GAAG;MAC9BC,OAAO,EAAEb,KAAK,CAACa,OAAO;MACtBC,IAAI,EAAEd,KAAK,CAACc,IAAI;MAChBC,KAAK,EAAEf,KAAK,CAACe;IACf,CAAC,GAAGf,KAAK;IACTC,OAAO,EAAEO,WAAW;IACpBN,KAAK;IACLc,UAAU,EAAE,OAAO;IAAE;IACrBC,SAAS,EAAEC,SAAS,CAACD;EACvB,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAGA,CAACC,OAAO,EAAEC,QAAQ,GAAG,CAAC,CAAC,KAAK;EACrD;EACA,IAAIlB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1CC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAE;MAAEa,OAAO;MAAEC;IAAS,CAAC,CAAC;EACvE;AACF,CAAC;AAED,eAAe;EACbtB,WAAW;EACXoB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}